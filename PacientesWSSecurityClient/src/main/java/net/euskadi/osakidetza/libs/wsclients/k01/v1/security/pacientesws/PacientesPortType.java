
package net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.1
 * 
 */
@WebService(name = "PacientesPortType", targetNamespace = "http://xmlns.osakidetza.com/cdc")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PacientesPortType {


    /**
     * 
     * @param cic
     * @return
     *     returns net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.Paciente
     * @throws PacienteNoEncontradoFault
     * @throws ServiceException_Exception
     * @throws ServiceNotAvailableException_Exception
     */
    @WebMethod(action = "buscarPacientePorCIC")
    @WebResult(name = "paciente", targetNamespace = "http://xmlns.osakidetza.com/cdc")
    @RequestWrapper(localName = "buscarPacientePorCIC", targetNamespace = "http://xmlns.osakidetza.com/cdc", className = "net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.BuscarPacientePorCIC")
    @ResponseWrapper(localName = "buscarPacientePorCICResponse", targetNamespace = "http://xmlns.osakidetza.com/cdc", className = "net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.BuscarPacientePorCICResponse")
    public Paciente buscarPacientePorCIC(
        @WebParam(name = "cic", targetNamespace = "http://xmlns.osakidetza.com/cdc")
        long cic)
        throws PacienteNoEncontradoFault, ServiceException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param pagina
     * @param paginacion
     * @param parameters
     * @return
     *     returns net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.BuscarHistoricoPacientePorCICResponse
     * @throws PacienteNoEncontradoFault
     * @throws PaginaNoValidaFault
     * @throws ServiceException_Exception
     * @throws ServiceNotAvailableException_Exception
     */
    @WebMethod(action = "buscarHistoricoPacientePorCIC")
    @WebResult(name = "buscarHistoricoPacientePorCICResponse", targetNamespace = "http://xmlns.osakidetza.com/cdc", partName = "result")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public BuscarHistoricoPacientePorCICResponse buscarHistoricoPacientePorCIC(
        @WebParam(name = "buscarHistoricoPacientePorCIC", targetNamespace = "http://xmlns.osakidetza.com/cdc", partName = "parameters")
        BuscarHistoricoPacientePorCIC parameters,
        @WebParam(name = "pagina", targetNamespace = "http://xmlns.osakidetza.com/cdc", header = true, mode = WebParam.Mode.INOUT, partName = "pagina")
        Holder<Integer> pagina,
        @WebParam(name = "paginacion", targetNamespace = "http://xmlns.osakidetza.com/cdc", header = true, mode = WebParam.Mode.OUT, partName = "paginacion")
        Holder<Paginacion> paginacion)
        throws PacienteNoEncontradoFault, PaginaNoValidaFault, ServiceException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param pagina
     * @param paginacion
     * @param parameters
     * @return
     *     returns net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.BuscarHistoricoDomicilioPorCICResponse
     * @throws PaginaNoValidaFault
     * @throws DomicilioNoEncontradoFault
     * @throws ServiceException_Exception
     * @throws ServiceNotAvailableException_Exception
     */
    @WebMethod(action = "buscarHistoricoDomicilioPorCIC")
    @WebResult(name = "buscarHistoricoDomicilioPorCICResponse", targetNamespace = "http://xmlns.osakidetza.com/cdc", partName = "result")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public BuscarHistoricoDomicilioPorCICResponse buscarHistoricoDomicilioPorCIC(
        @WebParam(name = "buscarHistoricoDomicilioPorCIC", targetNamespace = "http://xmlns.osakidetza.com/cdc", partName = "parameters")
        BuscarHistoricoDomicilioPorCIC parameters,
        @WebParam(name = "pagina", targetNamespace = "http://xmlns.osakidetza.com/cdc", header = true, mode = WebParam.Mode.INOUT, partName = "pagina")
        Holder<Integer> pagina,
        @WebParam(name = "paginacion", targetNamespace = "http://xmlns.osakidetza.com/cdc", header = true, mode = WebParam.Mode.OUT, partName = "paginacion")
        Holder<Paginacion> paginacion)
        throws DomicilioNoEncontradoFault, PaginaNoValidaFault, ServiceException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param cic
     * @return
     *     returns net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.Domicilio
     * @throws ServiceException_Exception
     * @throws DomicilioNoEncontradoFault
     * @throws ServiceNotAvailableException_Exception
     */
    @WebMethod(action = "buscaDomicilioPorCic")
    @WebResult(name = "domicilio", targetNamespace = "http://xmlns.osakidetza.com/cdc")
    @RequestWrapper(localName = "buscaDomicilioPorCic", targetNamespace = "http://xmlns.osakidetza.com/cdc", className = "net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.BuscaDomicilioPorCic")
    @ResponseWrapper(localName = "buscaDomicilioPorCicResponse", targetNamespace = "http://xmlns.osakidetza.com/cdc", className = "net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.BuscaDomicilioPorCicResponse")
    public Domicilio buscaDomicilioPorCic(
        @WebParam(name = "cic", targetNamespace = "http://xmlns.osakidetza.com/cdc")
        long cic)
        throws DomicilioNoEncontradoFault, ServiceException_Exception, ServiceNotAvailableException_Exception
    ;

    /**
     * 
     * @param pagina
     * @param paginacion
     * @param parameters
     * @return
     *     returns net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.BuscarPacientesResponse
     * @throws ValidacionDatosEntradaFault
     * @throws SituacionNoEncontradaFault
     * @throws QueryNotAvailableException_Exception
     * @throws PacienteNoEncontradoFault
     * @throws PaginaNoValidaFault
     * @throws ServiceException_Exception
     * @throws ServiceNotAvailableException_Exception
     */
    @WebMethod(action = "buscarPacientes")
    @WebResult(name = "buscarPacientesResponse", targetNamespace = "http://xmlns.osakidetza.com/cdc", partName = "result")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public BuscarPacientesResponse buscarPacientes(
        @WebParam(name = "buscarPacientes", targetNamespace = "http://xmlns.osakidetza.com/cdc", partName = "parameters")
        BusquedaPacientesRequestWrapper parameters,
        @WebParam(name = "pagina", targetNamespace = "http://xmlns.osakidetza.com/cdc", header = true, mode = WebParam.Mode.INOUT, partName = "pagina")
        Holder<Integer> pagina,
        @WebParam(name = "paginacion", targetNamespace = "http://xmlns.osakidetza.com/cdc", header = true, mode = WebParam.Mode.OUT, partName = "paginacion")
        Holder<Paginacion> paginacion)
        throws PacienteNoEncontradoFault, PaginaNoValidaFault, QueryNotAvailableException_Exception, ServiceException_Exception, ServiceNotAvailableException_Exception, SituacionNoEncontradaFault, ValidacionDatosEntradaFault
    ;

    /**
     * 
     * @param paciente
     * @param cic
     * @throws ServiceException_Exception
     * @throws SinDatosDeBusquedaFault
     * @throws ServiceNotAvailableException_Exception
     * @throws LimiteRegistrosSuperadoFault
     */
    @WebMethod(action = "getPacientesPorCic")
    @RequestWrapper(localName = "getPacientesPorCic", targetNamespace = "http://xmlns.osakidetza.com/cdc", className = "net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.GetPacientesPorCic")
    @ResponseWrapper(localName = "getPacientesPorCicResponse", targetNamespace = "http://xmlns.osakidetza.com/cdc", className = "net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.GetPacientesPorCicResponse")
    public void getPacientesPorCic(
        @WebParam(name = "cic", targetNamespace = "http://xmlns.osakidetza.com/cdc", mode = WebParam.Mode.INOUT)
        Holder<List<Long>> cic,
        @WebParam(name = "paciente", targetNamespace = "http://xmlns.osakidetza.com/cdc", mode = WebParam.Mode.OUT)
        Holder<List<Paciente>> paciente)
        throws LimiteRegistrosSuperadoFault, ServiceException_Exception, ServiceNotAvailableException_Exception, SinDatosDeBusquedaFault
    ;

    /**
     * 
     * @param pagina
     * @param paginacion
     * @param parameters
     * @return
     *     returns net.euskadi.osakidetza.libs.wsclients.k01.v1.security.pacientesws.BuscarPacientesPorComarcaResponse
     * @throws ValidacionDatosEntradaFault
     * @throws SituacionNoEncontradaFault
     * @throws QueryNotAvailableException_Exception
     * @throws PaginaNoValidaFault
     * @throws PacienteNoEncontradoFault
     * @throws ServiceException_Exception
     * @throws ServiceNotAvailableException_Exception
     */
    @WebMethod(action = "buscarPacientesPorComarca")
    @WebResult(name = "buscarPacientesPorComarcaResponse", targetNamespace = "http://xmlns.osakidetza.com/cdc", partName = "result")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public BuscarPacientesPorComarcaResponse buscarPacientesPorComarca(
        @WebParam(name = "buscarPacientesPorComarca", targetNamespace = "http://xmlns.osakidetza.com/cdc", partName = "parameters")
        BusquedaPacientesComarcaRequestWrapper parameters,
        @WebParam(name = "pagina", targetNamespace = "http://xmlns.osakidetza.com/cdc", header = true, mode = WebParam.Mode.INOUT, partName = "pagina")
        Holder<Integer> pagina,
        @WebParam(name = "paginacion", targetNamespace = "http://xmlns.osakidetza.com/cdc", header = true, mode = WebParam.Mode.OUT, partName = "paginacion")
        Holder<Paginacion> paginacion)
        throws PacienteNoEncontradoFault, PaginaNoValidaFault, QueryNotAvailableException_Exception, ServiceException_Exception, ServiceNotAvailableException_Exception, SituacionNoEncontradaFault, ValidacionDatosEntradaFault
    ;

}
